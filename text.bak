
func CreateAccountBatch(size int, nameFormat string) {
	b, err := ioutil.ReadFile("credentials.json")
	if err != nil {
		log.Fatalf("Unable to read client secret file: %v", err)
	}
	config, err := google.ConfigFromJSON(b, iam.CloudPlatformScope)
	if err != nil {
		log.Fatalf("Unable to parse client secret file to config: %v", err)
	}
	client := getClient(config)
	srv, err := iam.New(client)
	fmt.Println(srv.BasePath)
	accountService, err := service.GetAccountService()
	for i := 1; i <= size; i++ {
		accountName := fmt.Sprintf(nameFormat, i)
		err := CreateServiceAccount(accountName, srv, accountService)
		if err != nil {
			panic(err)
		}
	}
}

func CreateServiceAccount(accountName string, srv *iam.Service, accountService *service.AccountService) (error) {
	fmt.Println("creating", accountName)
	account, err := createServiceAccount(srv, ProjectId, accountName, accountName)
	if err != nil {
		return err
	}
	keyData, err := CreateAccountKey(srv, account)
	if err != nil {
		return err
	}
	driveAccount := entity.DriveAccount{}
	err = accountService.InitializeKey(&driveAccount, keyData)
	if err != nil {
		return err
	}
	driveAccount.Name = accountName
	return accountService.Save(&driveAccount)
}